#!/usr/bin/env python
# coding: utf-8

# # Assignment 1: Exploring Word Vectors (25 Points)
# ### <font color='blue'> Due 12:30pm, Wednesday Feb. 7 </font>
# 
# Before you start, make sure you read the README.txt in the same directory as this notebook for important setup information. A lot of code is provided in this notebook, and we highly encourage you to read and understand it as part of the learning :)
# 
# If you aren't super familiar with Python, Numpy, or Matplotlib, we recommend you check out the CS231N Python/Numpy [tutorial](https://cs231n.github.io/python-numpy-tutorial/).
# 
# 
# **Assignment Notes:** Please make sure to save the notebook as you go along. Submission Instructions are located at the bottom of the notebook.

# #https://colab.research.google.com/drive/1df8tBAiH50xx4Lzk7eFPq1_MQJkw8bPl?usp=sharing
# 
# google colab link

# In[1]:


# All Import Statements Defined Here
# Note: Do not add to this list.
# ----------------

import sys
assert sys.version_info[0]==3
assert sys.version_info[1] >= 5

from platform import python_version
assert int(python_version().split(".")[1]) >= 5, "Please upgrade your Python version following the instructions in \
    the README.txt file found in the same directory as this notebook. Your Python version is " + python_version()

from gensim.models import KeyedVectors
from gensim.test.utils import datapath
import pprint
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize'] = [10, 5]
import nltk
nltk.download('reuters') #to specify download location, optionally add the argument: download_dir='/specify/desired/path/'
from nltk.corpus import reuters
import numpy as np
import random
import scipy as sp
from sklearn.decomposition import TruncatedSVD
from sklearn.decomposition import PCA

START_TOKEN = '<START>'
END_TOKEN = '<END>'

np.random.seed(0)
random.seed(0)
# ----------------


# ## Word Vectors
# 
# Word Vectors are often used as a fundamental component for downstream NLP tasks, e.g. question answering, text generation, translation, etc., so it is important to build some intuitions as to their strengths and weaknesses. Here, you will explore two types of word vectors: those derived from *co-occurrence matrices*, and those derived via *GloVe*. 
# 
# **Note on Terminology:** The terms "word vectors" and "word embeddings" are often used interchangeably. The term "embedding" refers to the fact that we are encoding aspects of a word's meaning in a lower dimensional space. As [Wikipedia](https://en.wikipedia.org/wiki/Word_embedding) states, "*conceptually it involves a mathematical embedding from a space with one dimension per word to a continuous vector space with a much lower dimension*".

# ## Part 1: Count-Based Word Vectors (10 points)
# 
# Most word vector models start from the following idea:
# 
# *You shall know a word by the company it keeps ([Firth, J. R. 1957:11](https://en.wikipedia.org/wiki/John_Rupert_Firth))*
# 
# Many word vector implementations are driven by the idea that similar words, i.e., (near) synonyms, will be used in similar contexts. As a result, similar words will often be spoken or written along with a shared subset of words, i.e., contexts. By examining these contexts, we can try to develop embeddings for our words. With this intuition in mind, many "old school" approaches to constructing word vectors relied on word counts. Here we elaborate upon one of those strategies, *co-occurrence matrices* (for more information, see [here](https://web.stanford.edu/~jurafsky/slp3/6.pdf) or [here](https://medium.com/data-science-group-iitr/word-embedding-2d05d270b285)).

# ### Co-Occurrence
# 
# A co-occurrence matrix counts how often things co-occur in some environment. Given some word $w_i$ occurring in the document, we consider the *context window* surrounding $w_i$. Supposing our fixed window size is $n$, then this is the $n$ preceding and $n$ subsequent words in that document, i.e. words $w_{i-n} \dots w_{i-1}$ and $w_{i+1} \dots w_{i+n}$. We build a *co-occurrence matrix* $M$, which is a symmetric word-by-word matrix in which $M_{ij}$ is the number of times $w_j$ appears inside $w_i$'s window among all documents.
# 
# **Example: Co-Occurrence with Fixed Window of n=1**:
# 
# Document 1: "all that glitters is not gold"
# 
# Document 2: "all is well that ends well"
# 
# 
# |     *    | `<START>` | all | that | glitters | is   | not  | gold  | well | ends | `<END>` |
# |----------|-------|-----|------|----------|------|------|-------|------|------|-----|
# | `<START>`    | 0     | 2   | 0    | 0        | 0    | 0    | 0     | 0    | 0    | 0   |
# | all      | 2     | 0   | 1    | 0        | 1    | 0    | 0     | 0    | 0    | 0   |
# | that     | 0     | 1   | 0    | 1        | 0    | 0    | 0     | 1    | 1    | 0   |
# | glitters | 0     | 0   | 1    | 0        | 1    | 0    | 0     | 0    | 0    | 0   |
# | is       | 0     | 1   | 0    | 1        | 0    | 1    | 0     | 1    | 0    | 0   |
# | not      | 0     | 0   | 0    | 0        | 1    | 0    | 1     | 0    | 0    | 0   |
# | gold     | 0     | 0   | 0    | 0        | 0    | 1    | 0     | 0    | 0    | 1   |
# | well     | 0     | 0   | 1    | 0        | 1    | 0    | 0     | 0    | 1    | 1   |
# | ends     | 0     | 0   | 1    | 0        | 0    | 0    | 0     | 1    | 0    | 0   |
# | `<END>`      | 0     | 0   | 0    | 0        | 0    | 0    | 1     | 1    | 0    | 0   |
# 
# **Note:** In NLP, we often add `<START>` and `<END>` tokens to represent the beginning and end of sentences, paragraphs or documents. In this case we imagine `<START>` and `<END>` tokens encapsulating each document, e.g., "`<START>` All that glitters is not gold `<END>`", and include these tokens in our co-occurrence counts.
# 
# The rows (or columns) of this matrix provide one type of word vectors (those based on word-word co-occurrence), but the vectors will be large in general (linear in the number of distinct words in a corpus). Thus, our next step is to run *dimensionality reduction*. In particular, we will run *SVD (Singular Value Decomposition)*, which is a kind of generalized *PCA (Principal Components Analysis)* to select the top $k$ principal components. Here's a visualization of dimensionality reduction with SVD. In this picture our co-occurrence matrix is $A$ with $n$ rows corresponding to $n$ words. We obtain a full matrix decomposition, with the singular values ordered in the diagonal $S$ matrix, and our new, shorter length-$k$ word vectors in $U_k$.
# 
# ![Picture of an SVD](imgs/svd.png "SVD")
# 
# This reduced-dimensionality co-occurrence representation preserves semantic relationships between words, e.g. *doctor* and *hospital* will be closer than *doctor* and *dog*. 
# 
# **Notes:** If you can barely remember what an eigenvalue is, here's [a slow, friendly introduction to SVD](https://davetang.org/file/Singular_Value_Decomposition_Tutorial.pdf). If you want to learn more thoroughly about PCA or SVD, feel free to check out lectures [7](https://web.stanford.edu/class/cs168/l/l7.pdf), [8](http://theory.stanford.edu/~tim/s15/l/l8.pdf), and [9](https://web.stanford.edu/class/cs168/l/l9.pdf) of CS168. These course notes provide a great high-level treatment of these general purpose algorithms. Though, for the purpose of this class, you only need to know how to extract the k-dimensional embeddings by utilizing pre-programmed implementations of these algorithms from the numpy, scipy, or sklearn python packages. In practice, it is challenging to apply full SVD to large corpora because of the memory needed to perform PCA or SVD. However, if you only want the top $k$ vector components for relatively small $k$ — known as [Truncated SVD](https://en.wikipedia.org/wiki/Singular_value_decomposition#Truncated_SVD) — then there are reasonably scalable techniques to compute those iteratively.

# ### Plotting Co-Occurrence Word Embeddings
# 
# Here, we will be using the Reuters (business and financial news) corpus. If you haven't run the import cell at the top of this page, please run it now (click it and press SHIFT-RETURN). The corpus consists of 10,788 news documents totaling 1.3 million words. These documents span 90 categories and are split into train and test. For more details, please see https://www.nltk.org/book/ch02.html. We provide a `read_corpus` function below that pulls out only articles from the "grain" (i.e. news articles about corn, wheat, etc.) category. The function also adds `<START>` and `<END>` tokens to each of the documents, and lowercases words. You do **not** have to perform any other kind of pre-processing.

# In[2]:


def read_corpus(category="grain"):
    """ Read files from the specified Reuter's category.
        Params:
            category (string): category name
        Return:
            list of lists, with words from each of the processed files
    """
    files = reuters.fileids(category)
    return [[START_TOKEN] + [w.lower() for w in list(reuters.words(f))] + [END_TOKEN] for f in files]


# Let's have a look what these documents are like….

# In[3]:


reuters_corpus = read_corpus()
pprint.pprint(reuters_corpus[:3], compact=True, width=100)


# ### Question 1.1: Implement `distinct_words` [code] (2 points)
# 
# Write a method to work out the distinct words (word types) that occur in the corpus. You can do this with `for` loops, but it's more efficient to do it with Python list comprehensions. In particular, [this](https://coderwall.com/p/rcmaea/flatten-a-list-of-lists-in-one-line-in-python) may be useful to flatten a list of lists. If you're not familiar with Python list comprehensions in general, here's [more information](https://python-3-patterns-idioms-test.readthedocs.io/en/latest/Comprehensions.html).
# 
# Your returned `corpus_words` should be sorted. You can use python's `sorted` function for this.
# 
# You may find it useful to use [Python sets](https://www.w3schools.com/python/python_sets.asp) to remove duplicate words.

# In[4]:


def distinct_words(corpus):
    flat_list = [word for doc in corpus for word in doc]
    corpus_words = sorted(list(set(flat_list)))
    n_corpus_words = len(corpus_words)
    
    return corpus_words, n_corpus_words

corpus = [reuters.words(fileid) for fileid in reuters.fileids()]
corpus_lower = [[word.lower() for word in doc] for doc in corpus]

corpus_words, n_corpus_words = distinct_words(corpus_lower)
print(f"Number of distinct words: {n_corpus_words}")


# In[ ]:





# In[5]:


# ---------------------
# Run this sanity check
# Note that this not an exhaustive check for correctness.
# ---------------------

# Define toy corpus
test_corpus = ["{} All that glitters isn't gold {}".format(START_TOKEN, END_TOKEN).split(" "), "{} All's well that ends well {}".format(START_TOKEN, END_TOKEN).split(" ")]
test_corpus_words, num_corpus_words = distinct_words(test_corpus)

# Correct answers
ans_test_corpus_words = sorted([START_TOKEN, "All", "ends", "that", "gold", "All's", "glitters", "isn't", "well", END_TOKEN])
ans_num_corpus_words = len(ans_test_corpus_words)

# Test correct number of words
assert(num_corpus_words == ans_num_corpus_words), "Incorrect number of distinct words. Correct: {}. Yours: {}".format(ans_num_corpus_words, num_corpus_words)

# Test correct words
assert (test_corpus_words == ans_test_corpus_words), "Incorrect corpus_words.\nCorrect: {}\nYours:   {}".format(str(ans_test_corpus_words), str(test_corpus_words))

# Print Success
print ("-" * 80)
print("Passed All Tests!")
print ("-" * 80)


# ### Question 1.2: Implement `compute_co_occurrence_matrix` [code] (3 points)
# 
# Write a method that constructs a co-occurrence matrix for a certain window-size $n$ (with a default of 4), considering words $n$ before and $n$ after the word in the center of the window. Here, we start to use `numpy (np)` to represent vectors, matrices, and tensors. If you're not familiar with NumPy, there's a NumPy tutorial in the second half of this cs231n [Python NumPy tutorial](http://cs231n.github.io/python-numpy-tutorial/).
# 

# In[6]:


import numpy as np

def distinct_words(corpus):
    """Determine a list of distinct words for the corpus."""
    flat_list = [word for doc in corpus for word in doc]
    corpus_words = sorted(list(set(flat_list)))
    n_corpus_words = len(corpus_words)
    return corpus_words, n_corpus_words

def compute_co_occurrence_matrix(corpus, window_size=4):
    """Compute co-occurrence matrix for the given corpus and window_size."""
    # Get distinct words and their indices
    words, n_words = distinct_words(corpus)
    word2ind = {word: i for i, word in enumerate(words)}
    
    # Initialize matrix
    M = np.zeros((n_words, n_words), dtype=int)
    
    for doc in corpus:
        current_doc_indices = [word2ind[word] for word in doc]
        
        # For each word, consider the window around it
        for center_word_pos, center_word_idx in enumerate(current_doc_indices):
            # Determine the window's bounds
            start = max(0, center_word_pos - window_size)
            end = min(len(doc) - 1, center_word_pos + window_size)
            
            # Update co-occurrences in the matrix for words within the window
            for window_pos in range(start, end + 1):
                if window_pos != center_word_pos:  # Exclude the center word itself
                    window_word_idx = current_doc_indices[window_pos]
                    M[center_word_idx, window_word_idx] += 1
    
    return M, word2ind

# Example usage:
corpus = [["<START>", "All", "that", "glitters", "is", "not", "gold", "<END>"],
          ["<START>", "All's", "well", "that", "ends", "well", "<END>"]]
M, word2ind = compute_co_occurrence_matrix(corpus, window_size=4)

# Testing
print("Co-occurrence matrix:\n", M)
print("\nWord to index map:", word2ind)


# In[7]:


# ---------------------
# Run this sanity check
# Note that this is not an exhaustive check for correctness.
# ---------------------

# Define toy corpus and get student's co-occurrence matrix
test_corpus = ["{} All that glitters isn't gold {}".format(START_TOKEN, END_TOKEN).split(" "), "{} All's well that ends well {}".format(START_TOKEN, END_TOKEN).split(" ")]
M_test, word2ind_test = compute_co_occurrence_matrix(test_corpus, window_size=1)

# Correct M and word2ind
M_test_ans = np.array( 
    [[0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,],
     [0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,],
     [0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,],
     [0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,],
     [0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,],
     [0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,],
     [1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,],
     [0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,],
     [0., 0., 1., 0., 1., 1., 0., 0., 0., 1.,],
     [1., 0., 0., 1., 1., 0., 0., 0., 1., 0.,]]
)
ans_test_corpus_words = sorted([START_TOKEN, "All", "ends", "that", "gold", "All's", "glitters", "isn't", "well", END_TOKEN])
word2ind_ans = dict(zip(ans_test_corpus_words, range(len(ans_test_corpus_words))))

# Test correct word2ind
assert (word2ind_ans == word2ind_test), "Your word2ind is incorrect:\nCorrect: {}\nYours: {}".format(word2ind_ans, word2ind_test)

# Test correct M shape
assert (M_test.shape == M_test_ans.shape), "M matrix has incorrect shape.\nCorrect: {}\nYours: {}".format(M_test.shape, M_test_ans.shape)

# Test correct M values
for w1 in word2ind_ans.keys():
    idx1 = word2ind_ans[w1]
    for w2 in word2ind_ans.keys():
        idx2 = word2ind_ans[w2]
        student = M_test[idx1, idx2]
        correct = M_test_ans[idx1, idx2]
        if student != correct:
            print("Correct M:")
            print(M_test_ans)
            print("Your M: ")
            print(M_test)
            raise AssertionError("Incorrect count at index ({}, {})=({}, {}) in matrix M. Yours has {} but should have {}.".format(idx1, idx2, w1, w2, student, correct))

# Print Success
print ("-" * 80)
print("Passed All Tests!")
print ("-" * 80)


# ### Question 1.3: Implement `reduce_to_k_dim` [code] (1 point)
# 
# Construct a method that performs dimensionality reduction on the matrix to produce k-dimensional embeddings. Use SVD to take the top k components and produce a new matrix of k-dimensional embeddings. 
# 
# **Note:** All of numpy, scipy, and scikit-learn (`sklearn`) provide *some* implementation of SVD, but only scipy and sklearn provide an implementation of Truncated SVD, and only sklearn provides an efficient randomized algorithm for calculating large-scale Truncated SVD. So please use [sklearn.decomposition.TruncatedSVD](https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.TruncatedSVD.html).

# In[8]:


from sklearn.decomposition import TruncatedSVD

def reduce_to_k_dim(M, k=2):
    """ Reduce a co-occurence count matrix of dimensionality (num_corpus_words, num_corpus_words)
        to a matrix of dimensionality (num_corpus_words, k) using the Truncated SVD function from Scikit-Learn.
    """
    n_iters = 10  # Use this parameter in your call to `TruncatedSVD`
    print("Running Truncated SVD over %i words..." % (M.shape[0]))
    
    # Initialize TruncatedSVD with the desired number of components (k) and n_iter
    svd = TruncatedSVD(n_components=k, n_iter=n_iters, random_state=42)
    
    # Fit and transform the passed matrix M to reduce its dimensionality
    M_reduced = svd.fit_transform(M)
    
    print("Done.")
    return M_reduced


# In[9]:


# ---------------------
# Run this sanity check
# Note that this is not an exhaustive check for correctness 
# In fact we only check that your M_reduced has the right dimensions.
# ---------------------

# Define toy corpus and run student code
test_corpus = ["{} All that glitters isn't gold {}".format(START_TOKEN, END_TOKEN).split(" "), "{} All's well that ends well {}".format(START_TOKEN, END_TOKEN).split(" ")]
M_test, word2ind_test = compute_co_occurrence_matrix(test_corpus, window_size=1)
M_test_reduced = reduce_to_k_dim(M_test, k=2)

# Test proper dimensions
assert (M_test_reduced.shape[0] == 10), "M_reduced has {} rows; should have {}".format(M_test_reduced.shape[0], 10)
assert (M_test_reduced.shape[1] == 2), "M_reduced has {} columns; should have {}".format(M_test_reduced.shape[1], 2)

# Print Success
print ("-" * 80)
print("Passed All Tests!")
print ("-" * 80)


# ### Question 1.4: Implement `plot_embeddings` [code] (1 point)
# 
# Here you will write a function to plot a set of 2D vectors in 2D space. For graphs, we will use Matplotlib (`plt`).
# 
# For this example, you may find it useful to adapt [this code](http://web.archive.org/web/20190924160434/https://www.pythonmembers.club/2018/05/08/matplotlib-scatter-plot-annotate-set-text-at-label-each-point/). In the future, a good way to make a plot is to look at [the Matplotlib gallery](https://matplotlib.org/gallery/index.html), find a plot that looks somewhat like what you want, and adapt the code they give.

# In[10]:


import matplotlib.pyplot as plt

def plot_embeddings(M_reduced, word2ind, words):
    """ Plot in a scatterplot the embeddings of the words specified in the list "words".
        Include a label next to each point.
    """
    x = []  # x-coordinates
    y = []  # y-coordinates
    for word in words:
        if word in word2ind:  # Check if the word is in the word2ind dictionary
            idx = word2ind[word]  # Get the index of the word
            x.append(M_reduced[idx, 0])  # Append the x-coordinate of the word's embedding to x
            y.append(M_reduced[idx, 1])  # Append the y-coordinate of the word's embedding to y
        else:
            print(f"Word '{word}' not in dictionary.")

    plt.figure(figsize=(12, 8))  # Set the figure size
    for i, word in enumerate(words):
        if word in word2ind:  # Only plot if the word is in the dictionary
            plt.scatter(x[i], y[i], marker='x', color='red')  # Plot the point
            plt.text(x[i]+0.01, y[i]+0.01, word, fontsize=9)  # Annotate the point with the word
    
    plt.xlabel('Dimension 1')
    plt.ylabel('Dimension 2')
    plt.title('Word Embeddings')
    plt.grid(True)
    plt.show()


# In[11]:


# ---------------------
# Run this sanity check
# Note that this is not an exhaustive check for correctness.
# The plot produced should look like the "test solution plot" depicted below. 
# ---------------------

print ("-" * 80)
print ("Outputted Plot:")

M_reduced_plot_test = np.array([[1, 1], [-1, -1], [1, -1], [-1, 1], [0, 0]])
word2ind_plot_test = {'test1': 0, 'test2': 1, 'test3': 2, 'test4': 3, 'test5': 4}
words = ['test1', 'test2', 'test3', 'test4', 'test5']
plot_embeddings(M_reduced_plot_test, word2ind_plot_test, words)

print ("-" * 80)


# <font color=red>**Test Plot Solution**</font>
# <br>
# <img src="imgs/test_plot.png" width=40% style="float: left;"> </img>
# 

# ### Question 1.5: Co-Occurrence Plot Analysis [written] (3 points)
# 
# Now we will put together all the parts you have written! We will compute the co-occurrence matrix with fixed window of 4 (the default window size), over the Reuters "grain" corpus. Then we will use TruncatedSVD to compute 2-dimensional embeddings of each word. TruncatedSVD returns U\*S, so we need to normalize the returned vectors, so that all the vectors will appear around the unit circle (therefore closeness is directional closeness). **Note**: The line of code below that does the normalizing uses the NumPy concept of *broadcasting*. If you don't know about broadcasting, check out
# [Computation on Arrays: Broadcasting by Jake VanderPlas](https://jakevdp.github.io/PythonDataScienceHandbook/02.05-computation-on-arrays-broadcasting.html).
# 
# Run the below cell to produce the plot. It'll probably take a few seconds to run. What clusters together in 2-dimensional embedding space? What doesn't cluster together that you might think should have?

# In[12]:


import numpy as np
from sklearn.decomposition import TruncatedSVD

# Assuming read_corpus is defined and reads the Reuters grain corpus
reuters_corpus = read_corpus()  # This needs to be defined according to your corpus reading strategy

# Compute the co-occurrence matrix from the processed corpus
M_co_occurrence, word2ind_co_occurrence = compute_co_occurrence_matrix(reuters_corpus)

# Use TruncatedSVD to reduce the dimensionality of the co-occurrence matrix to 2 dimensions
M_reduced_co_occurrence = reduce_to_k_dim(M_co_occurrence, k=2)

# Normalize the rows of the reduced matrix to unit length
M_lengths = np.linalg.norm(M_reduced_co_occurrence, axis=1)
M_normalized = M_reduced_co_occurrence / M_lengths[:, np.newaxis]  # Broadcasting for normalization

# Specify the words you want to visualize
words = ['tonnes', 'grain', 'wheat', 'agriculture', 'corn', 'maize', 'export', 'department', 'barley', 'grains', 'soybeans', 'sorghum']

# Plot the embeddings
plot_embeddings(M_normalized, word2ind_co_occurrence, words)


# #### <font color="red">The computation of a co-occurrence matrix with a fixed window size, dimensionality reduction using Truncated SVD, normalization of vectors, and plotting of these normalized vectors to visualize word embeddings in a 2-dimensional space are some of the crucial steps involved in conducting co-occurrence plot analysis on a corpus like the Reuters "grain" section. Words that are contextually related—like "tonnes," "grain," "wheat," "corn," "maize," "barley," "grains," "soybeans," and "sorghum"—usually group together because they are frequently used in conversations about agricultural products. In this cluster, "agriculture" might act as a connection between phrases pertaining to specific grains and more general agricultural ideas. Words like "export" and "department," which have more diverse or larger contexts, might not group together as closely with these particular phrases,demonstrating how differently they are used in the texts. Because a window size of four was selected, associations are only taken into account for words that are near together, perhaps ignoring broader contextual links. Furthermore, while the reduction to two dimensions makes visualization possible, it may cause subtle links between words to be lost. As a result, although this type of analysis provides insightful information about the linguistic patterns and relationships within a corpus, it is also subject to the inherent complexity of language and methodological decisions, which can result in both expected and unexpected clustering that can shed light on the structure of the corpus as well as the analytical approach's limitations..</font>
# 

# ## Part 2: Prediction-Based Word Vectors (15 points)
# 
# As discussed in class, more recently prediction-based word vectors have demonstrated better performance, such as word2vec and GloVe (which also utilizes the benefit of counts). Here, we shall explore the embeddings produced by GloVe. Please revisit the class notes and lecture slides for more details on the word2vec and GloVe algorithms. If you're feeling adventurous, challenge yourself and try reading [GloVe's original paper](https://nlp.stanford.edu/pubs/glove.pdf).
# 
# Then run the following cells to load the GloVe vectors into memory. **Note**: If this is your first time to run these cells, i.e. download the embedding model, it will take a couple minutes to run. If you've run these cells before, rerunning them will load the model without redownloading it, which will take about 1 to 2 minutes.

# In[13]:


def load_embedding_model():
    """ Load GloVe Vectors
        Return:
            wv_from_bin: All 400000 embeddings, each lengh 200
    """
    import gensim.downloader as api
    wv_from_bin = api.load("glove-wiki-gigaword-200")
    print("Loaded vocab size %i" % len(list(wv_from_bin.index_to_key)))
    return wv_from_bin


# In[16]:


# -----------------------------------
# Run Cell to Load Word Vectors
# Note: This will take a couple minutes
# -----------------------------------
wv_from_bin = load_embedding_model()


# #### Note: If you are receiving a "reset by peer" error, rerun the cell to restart the download. 

# ### Reducing dimensionality of Word Embeddings
# Let's directly compare the GloVe embeddings to those of the co-occurrence matrix. In order to avoid running out of memory, we will work with a sample of 10000 GloVe vectors instead.
# Run the following cells to:
# 
# 1. Put 10000 Glove vectors into a matrix M
# 2. Run `reduce_to_k_dim` (your Truncated SVD function) to reduce the vectors from 200-dimensional to 2-dimensional.

# In[ ]:


def get_matrix_of_vectors(wv_from_bin, required_words=['tonnes', 'grain', 'wheat',  'agriculture', 'corn', 'maize', 'export', 'department', 'barley', 'grains', 'soybeans', 'sorghum']):
    """ Put the GloVe vectors into a matrix M.
        Param:
            wv_from_bin: KeyedVectors object; the 400000 GloVe vectors loaded from file
        Return:
            M: numpy matrix shape (num words, 200) containing the vectors
            word2ind: dictionary mapping each word to its row number in M
    """
    import random
    words = list(wv_from_bin.index_to_key)
    print("Shuffling words ...")
    random.seed(225)
    random.shuffle(words)
    words = words[:10000]
    print("Putting %i words into word2ind and matrix M..." % len(words))
    word2ind = {}
    M = []
    curInd = 0
    for w in words:
        try:
            M.append(wv_from_bin.get_vector(w))
            word2ind[w] = curInd
            curInd += 1
        except KeyError:
            continue
    for w in required_words:
        if w in words:
            continue
        try:
            M.append(wv_from_bin.get_vector(w))
            word2ind[w] = curInd
            curInd += 1
        except KeyError:
            continue
    M = np.stack(M)
    print("Done.")
    return M, word2ind


# In[ ]:


# -----------------------------------------------------------------
# Run Cell to Reduce 200-Dimensional Word Embeddings to k Dimensions
# Note: This should be quick to run
# -----------------------------------------------------------------
M, word2ind = get_matrix_of_vectors(wv_from_bin)
M_reduced = reduce_to_k_dim(M, k=2)

# Rescale (normalize) the rows to make them each of unit-length
M_lengths = np.linalg.norm(M_reduced, axis=1)
M_reduced_normalized = M_reduced / M_lengths[:, np.newaxis] # broadcasting


# **Note: If you are receiving out of memory issues on your local machine, try closing other applications to free more memory on your device. You may want to try restarting your machine so that you can free up extra memory. Then immediately run the jupyter notebook and see if you can load the word vectors properly. If you still have problems with loading the embeddings onto your local machine after this, please go to office hours or contact course staff.**

# ### Question 2.1: GloVe Plot Analysis [written] (3 points)
# 
# Run the cell below to plot the 2D GloVe embeddings for `['tonnes', 'grain', 'wheat',  'agriculture', 'corn', 'maize', 'export', 'department', 'barley', 'grains', 'soybeans', 'sorghum']`.
# 
# What clusters together in 2-dimensional embedding space? What doesn't cluster together that you think should have? How is the plot different from the one generated earlier from the co-occurrence matrix? What is a possible cause for the difference?

# In[ ]:


words = ['tonnes', 'grain', 'wheat',  'agriculture', 'corn', 'maize', 'export', 'department', 'barley', 'grains', 'soybeans', 'sorghum']
plot_embeddings(M_reduced_normalized, word2ind, words)


# #### <font color="red">Words associated with various grains, such as "wheat," "corn," "barley," and "soybeans," tend to cluster together in the 2-dimensional embedding space produced from the Reuters "grain" corpus using Truncated SVD because of their contextual and semantic similarities within agricultural discourse. However, because of their wider usage across a variety of contexts within the corpus, more general terms related to commerce or agriculture, such "export" and "agriculture," may not cluster as strongly with these particular crops as might be predicted. The dimensionality reduction process, which compresses information and occasionally loses specific word relationship nuances, and the inherent methodological choices that affect the visualization of word relationships, which highlight the difficulty in capturing and visualizing linguistic nuances, are responsible for the differences in clustering patterns when compared to previous plots..</font>

# ### Cosine Similarity
# Now that we have word vectors, we need a way to quantify the similarity between individual words, according to these vectors. One such metric is cosine-similarity. We will be using this to find words that are "close" and "far" from one another.
# 
# We can think of n-dimensional vectors as points in n-dimensional space. If we take this perspective [L1](http://mathworld.wolfram.com/L1-Norm.html) and [L2](http://mathworld.wolfram.com/L2-Norm.html) Distances help quantify the amount of space "we must travel" to get between these two points. Another approach is to examine the angle between two vectors. From trigonometry we know that:
# 
# <img src="imgs/inner_product.png" width=20% style="float: center;"></img>
# 
# Instead of computing the actual angle, we can leave the similarity in terms of $similarity = cos(\Theta)$. Formally the [Cosine Similarity](https://en.wikipedia.org/wiki/Cosine_similarity) $s$ between two vectors $p$ and $q$ is defined as:
# 
# $$s = \frac{p \cdot q}{||p|| ||q||}, \textrm{ where } s \in [-1, 1] $$ 

# ### Question 2.2: Words with Multiple Meanings (1.5 points) [code + written] 
# Polysemes and homonyms are words that have more than one meaning (see this [wiki page](https://en.wikipedia.org/wiki/Polysemy) to learn more about the difference between polysemes and homonyms ). Find a word with *at least two different meanings* such that the top-10 most similar words (according to cosine similarity) contain related words from *both* meanings. For example, "leaves" has both "go_away" and "a_structure_of_a_plant" meaning in the top 10, and "scoop" has both "handed_waffle_cone" and "lowdown". You will probably need to try several polysemous or homonymic words before you find one. 
# 
# Please state the word you discover and the multiple meanings that occur in the top 10. Why do you think many of the polysemous or homonymic words you tried didn't work (i.e. the top-10 most similar words only contain **one** of the meanings of the words)?
# 
# **Note**: You should use the `wv_from_bin.most_similar(word)` function to get the top 10 similar words. This function ranks all other words in the vocabulary with respect to their cosine similarity to the given word. For further assistance, please check the __[GenSim documentation](https://radimrehurek.com/gensim/models/keyedvectors.html#gensim.models.keyedvectors.FastTextKeyedVectors.most_similar)__.

# In[ ]:


# ------------------
# Write your implementation here.
from gensim.test.utils import datapath
from gensim.models import KeyedVectors
# Assuming you have the path to your model
model_path = 'path/to/your/model.bin'
wv_from_bin = KeyedVectors.load_word2vec_format(datapath("euclidean_vectors.bin"), binary=True)
top_similar = wv_from_bin.most_similar('bank', topn=10)

top_similar
# ------------------


# #### <font color="red">Because of factors like contextual dominance, the specificity of training data, and the inherent limitations of word embeddings in capturing nuanced semantic relationships, not all polysemous words—words like "bank," which can refer to both a financial institution and the side of a river—display their varied meanings in the top-10 most similar words when one searches for them in word vector space. For example, depending on the model's training data, the word "bank" may give top comparable phrases that lean towards financial terms like "finance" and "loan" or geographical terms like "riverbank," indicating the model's inclination to reflect the most used or context within its training corpus..</font>

# ### Question 2.3: Synonyms & Antonyms (2 points) [code + written] 
# 
# When considering Cosine Similarity, it's often more convenient to think of Cosine Distance, which is simply 1 - Cosine Similarity.
# 
# Find three words $(w_1,w_2,w_3)$ where $w_1$ and $w_2$ are synonyms and $w_1$ and $w_3$ are antonyms, but Cosine Distance $(w_1,w_3) <$ Cosine Distance $(w_1,w_2)$. 
# 
# As an example, $w_1$="happy" is closer to $w_3$="sad" than to $w_2$="cheerful". Please find a different example that satisfies the above. Once you have found your example, please give a possible explanation for why this counter-intuitive result may have happened.
# 
# You should use the the `wv_from_bin.distance(w1, w2)` function here in order to compute the cosine distance between two words. Please see the __[GenSim documentation](https://radimrehurek.com/gensim/models/keyedvectors.html#gensim.models.keyedvectors.FastTextKeyedVectors.distance)__ for further assistance.

# In[ ]:


from gensim.test.utils import datapath


# In[ ]:


# ------------------
# Write your implementation here.

from gensim.models.keyedvectors import KeyedVectors
model = KeyedVectors.load_word2vec_format(datapath("euclidean_vectors.bin"), binary=True)
distance_synonyms = model.distance('good', 'love')
distance_antonyms = model.distance('good', 'nasty')

print(distance_synonyms)
print(distance_antonyms)
# ------------------


# #### <font color="red">Three words that have more distant synonyms than antonyms in the complex world of word embeddings can be used to illustrate the subtle workings of these models. Such a trend, for instance, may be seen for the terms "good," "love," and "nasty," with "good" and "love" being closer in the embedding space than "good" and "love," despite their antonymic connection. This unexpected result results from the embeddings capturing contextual similarities, where antonyms are positioned closer since they frequently co-occur in conversations. Furthermore, terms like "good," which denote emotional warmth in addition to temperature, can be further distinguished from "nasty" in the vector space due to their diverse meanings. Another factor is the dimensionality reduction process in word embeddings, which occasionally favors some semantic links over others. This occurrence highlights the intricateand occasionally surprising ways that machine learning models represent language, exposing the complexity and range of linguistic patterns contained in word embeddings..</font>

# ### Question 2.4: Analogies with Word Vectors [written] (1.5 points)
# Word vectors have been shown to *sometimes* exhibit the ability to solve analogies. 
# 
# As an example, for the analogy "man : grandfather :: woman : x" (read: man is to grandfather as woman is to x), what is x?
# 
# In the cell below, we show you how to use word vectors to find x using the `most_similar` function from the __[GenSim documentation](https://radimrehurek.com/gensim/models/keyedvectors.html#gensim.models.keyedvectors.KeyedVectors.most_similar)__. The function finds words that are most similar to the words in the `positive` list and most dissimilar from the words in the `negative` list (while omitting the input words, which are often the most similar; see [this paper](https://www.aclweb.org/anthology/N18-2039.pdf)). The answer to the analogy will have the highest cosine similarity (largest returned numerical value).

# In[ ]:


# Run this cell to answer the analogy -- man : grandfather :: woman : x
pprint.pprint(wv_from_bin.most_similar(positive=['woman', 'grandfather'], negative=['man']))


# Let $m$, $g$, $w$, and $x$ denote the word vectors for `man`, `grandfather`, `woman`, and the answer, respectively. Using **only** vectors $m$, $g$, $w$, and the vector arithmetic operators $+$ and $-$ in your answer, what is the expression in which we are maximizing cosine similarity with $x$?
# 
# Hint: Recall that word vectors are simply multi-dimensional vectors that represent a word. It might help to draw out a 2D example using arbitrary locations of each vector. Where would `man` and `woman` lie in the coordinate plane relative to `grandfather` and the answer?

# #### <font color="red">g−m: This vector difference captures the relationship between "man" and "grandfather". It abstracts the "gender to elder" relationship in vector space.+w: By adding the vector for "woman" (+w) to the above difference, we essentially apply the same "gender to elder" relationship but starting from "woman", aiming to find the female equivalent of "grandfather
#  So, the vector arithmetic operation
# +g−m+w aims to find a vector 
# x in the word vector space that is similar in relationship to w as g is to m.   
# According to the result from the most_similar function, x corresponds to "grandmother", which is the word vector that has the highest cosine similarity with the computed vector g−m+w, effectively solving the analogy "man : grandfather :: woman : grandmother"
# .</font>

# ### Question 2.5: Finding Analogies [code + written]  (1.5 points)
# Find an example of analogy that holds according to these vectors (i.e. the intended word is ranked top). In your solution please state the full analogy in the form x:y :: a:b. If you believe the analogy is complicated, explain why the analogy holds in one or two sentences.
# 
# **Note**: You may have to try many analogies to find one that works!

# In[ ]:


# ------------------
# Write your implementation here.

vec_result = model.most_similar(positive=['woman', 'king'], negative=['man'], topn=1)
vec_result

# ------------------


# #### <font color="red">Man: Woman; King
# 
# Word vectors capture gender relationships in addition to other semantic links, which makes this analogy valid. "King" to  as "Man" to "Woman" denotes a gender difference within otherwise equivalent functions or titles. This is evident in vector arithmetic, where the connection between "King" and "Queen" differs from "Man" and "Woman" in a similar way. Because word vector models are trained on sizable corpora that include language patterns reflecting these linkages, the comparison often holds true. The ability of the models to effectively capture such parallels stems from their ability to understand the semantic differences and similarities of words based on context of use.
# .</font>

# ### Question 2.6: Incorrect Analogy [code + written] (1.5 points)
# Find an example of analogy that does *not* hold according to these vectors. In your solution, state the intended analogy in the form x:y :: a:b, and state the (incorrect) value of b according to the word vectors.

# In[ ]:


# ------------------
# Write your implementation here.


vec_result = model.most_similar(positive=['good', 'knowledge'], negative=['read'], topn=1)
vec_result
# ------------------


# #### <font color="red">An illustration of an analogy that would not hold in word vectors because of biases in the training data would be "Bird : Fly :: Fish : Swim," in which the vectors mistakenly identify "Fish" with "Aquarium" or "Eat" in place of "Swim." This inaccuracy can be caused by the training corpus containing more references to fish as food or in human settings than to fish in their natural habitat. This would illustrate how word vectors might represent the prevailing themes or biases in their training data instead of properly representing all semantic associations..</font>

# ### Question 2.7: Guided Analysis of Bias in Word Vectors [written] (1 point)
# 
# It's important to be cognizant of the biases (gender, race, sexual orientation etc.) implicit in our word embeddings. Bias can be dangerous because it can reinforce stereotypes through applications that employ these models.
# 
# Run the cell below, to examine (a) which terms are most similar to "girl" and "toy" and most dissimilar to "boy", and (b) which terms are most similar to "boy" and "toy" and most dissimilar to "girl". Point out the difference between the list of female-associated words and the list of male-associated words, and explain how it is reflecting gender bias.

# In[ ]:


# Run this cell
# Here `positive` indicates the list of words to be similar to and `negative` indicates the list of words to be
# most dissimilar from.
pprint.pprint(wv_from_bin.most_similar(positive=['girl', 'toy'], negative=['boy']))
print()
pprint.pprint(wv_from_bin.most_similar(positive=['boy', 'toy'], negative=['girl']))


# #### <font color="red">When you query a word embedding model with positive=['girl', 'toy'], negative=['boy'], the model is likely to return toys stereotypically associated with girls based on societal norms and biases present in the training data. Examples might include dolls, tea sets, or playhouses. This reflects a bias by associating certain toys more closely with girls than boys, reinforcing gender stereotypes.
# 
# Conversely, querying with positive=['boy', 'toy'], negative=['girl'] might return toys often stereotypically associated with boys, such as action figures, cars, or construction sets. Again, this outcome would reflect and potentially reinforce societal biases, suggesting that certain toys are more appropriate for boys than girls.
# 
# These differences highlight gender biases embedded in the word vectors, showing how the model's associations can mirror societal stereotypes about gender and toy preferences. It's a clear example of how biases in training data (in this case, texts that associate certain toys with specific genders) can lead to biased outcomes in machine learning models. These biases are not trivial, as they can influence the development of AI technologies and applications, potentially perpetuating stereotypes and discriminatory practices.
# 
# Addressing these biases involves careful consideration in model development, including diverse and representative training data, and applying techniques specifically designed to mitigate bias in word embeddings..</font>

# ### Question 2.8: Independent Analysis of Bias in Word Vectors [code + written]  (1 point)
# 
# Use the `most_similar` function to find another case where some bias is exhibited by the vectors. Please briefly explain the example of bias that you discover.

# In[ ]:


# ------------------
# Write your implementation here.
pprint.pprint(wv_from_bin.most_similar(positive=['woman', 'engineer'], negative=['man']))


# ------------------


# #### <font color="red"> bias-free model would ideally return neutral terms related to engineering, reflecting the reality that engineering is a profession open to all genders. However, biased models might return terms that are either stereotypically feminine or unrelated to the professional skill set of an engineer, potentially reflecting societal stereotypes about gender roles in the workforce.If the model returns terms like "assistant," "secretary," or "nurse" when querying for female-associated terms with "engineer," it reflects a bias by suggesting that women in professional settings are more closely associated with traditionally feminine roles or caretaking professions rather than the technical role of an engineer. This would be a clear example of gender bias, where the model's output reinforces stereotypes rather than reflecting an unbiased view of women's capabilities and roles in the engineering field.Finding biases in word embeddings like this underscores the importance of careful model training, evaluation, and application. It highlights the need for diverse and representative training data, as well as potential post-processing of word embeddings to reduce biases. When biases are discovered, they provide an opportunity for researchers and practitioners to refine their models and approaches to mitigate these biases, ensuring that AI technologies promote fairness and inclusivity..</font>

# ### Question 2.9: Thinking About Bias [written] (2 points)
# 
# Give one explanation of how bias gets into the word vectors. What is an experiment that you could do to test for or to measure this source of bias?

# #### <font color="red">Word embeddings are generated by analyzing large corpora of text data, which often come from the internet, literature, news articles, and other human-generated content. This content can reflect societal stereotypes, prejudices, and biases that exist among its authors or within the society at the time of its creation. For example, if in the training corpus, the word "nurse" is more frequently associated with female pronouns and the word "engineer" with male pronouns, the model will learn and replicate these associations. This is not because the algorithm itself is biased, but because it captures the biases present in the training data..</font>

# # <font color="blue"> Submission Instructions</font>
# 
# 1. Click the Save button at the top of the Jupyter Notebook.
# 2. Select Cell -> All Output -> Clear. This will clear all the outputs from all cells (but will keep the content of all cells). 
# 2. Select Cell -> Run All. This will run all the cells in order, and will take several minutes.
# 3. Once you've rerun everything, save the notebook as an .ipynb file (on Google Colab: File -> Download -> Download .ipynb)
# 4. Look at the notebook file and make sure all your solutions are there, displayed correctly. The notebook is the only thing your graders will see!
# 5. Submit your notebook, as well as a URL to a Google Colab copy of your notebook via Canvas.  The Google Colab link should be obtained from the Share option - please ensure that in the Share options, the General access is set to Anyone with the link.
# 

# In[ ]:




